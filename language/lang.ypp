%{
#include <string>
#include <memory>
#include <utility>
#include <map>
#include <syntax.hpp>
#include <utils/reader.hpp>
#include <utils/control.hpp>
#include <boost/algorithm/string.hpp>

#define YYDEBUG 1
#define YYERROR_VERBOSE 1

jawe::shared_node* program;
void *err_block;

void yyerror(const std::string&);
extern int yylex();
%}

%union {
	jawe::shared_node* node;
	double number;
	std::string* string;
	std::vector<jawe::shared_node>* node_vec;
	std::vector<std::string> *string_vec;
	std::map<std::string, jawe::shared_node> *key_vals;
	std::pair<std::string, jawe::shared_node> *key_val;
}

%token delim_token

%token<string> id_token

%token undefined_token
%token null_token
%token nan_token
%token true_token
%token false_token
%token<number> num_token
%token<string> string_token

%token return_token
%token break_token
%token cont_token

%token if_token
%token else_token
%token switch_token
%token case_token
%token while_token
%token for_token
%token do_token
%token default_token

%token assign_token ass_plus_token ass_minus_token ass_pow_token ass_mult_token ass_div_token ass_mod_token ass_sh_l_token ass_sh_r_token ass_sh_u_token ass_con_b_token ass_xor_b_token ass_dis_b_token
%token log_or_token
%token log_and_token
%token bit_or_token
%token bit_xor_token
%token bit_and_token
%token eq_token not_eq_token t_eq_token t_not_eq_token
%token less_token less_eq_token great_token great_eq_token in_token instanceof_token
%token bit_shift_l_token bit_shift_r_token bit_shift_u_token
%token plus_token minus_token
%token times_token divide_token mod_token
%token power_token
%token inc_token dec_token log_not_token bit_not_token delete_token void_token typeof_token
%token new_token
%token function_token
%token const_token let_token var_token
%token bracket_token bracket_closed dot_access_token

%nonassoc '{' '}'
%nonassoc no_else_token
%nonassoc phony_lval
%nonassoc else_token
%left comma_token
%right assign_token ass_plus_token ass_minus_token ass_pow_token ass_mult_token ass_div_token ass_mod_token ass_sh_l_token ass_sh_r_token ass_sh_u_token ass_con_b_token ass_xor_b_token ass_dis_b_token
%right '?' ':'
%left log_or_token
%left log_and_token
%left bit_or_token
%left bit_xor_token
%left bit_and_token
%left eq_token not_eq_token t_eq_token t_not_eq_token
%left less_token less_eq_token great_token great_eq_token in_token instanceof_token
%left bit_shift_l_token bit_shift_r_token bit_shift_u_token
%left plus_token minus_token
%left times_token divide_token mod_token
%right power_token
%right inc_token dec_token log_not_token bit_not_token uplus_token uminus_token delete_token void_token typeof_token
%nonassoc post_inc post_dec
%left '(' fn_call_token
%nonassoc new_token
%left bracket_token dot_access_token
%left prec_parens_token

%type<node> Expr Assign LValue Literal Primitive IndexedObj ArrLiteral ObjLiteral Lambda NamedFun Declaration Cond While For DoWhile SwitchCase Case Default CodeBlock LambdaBody Command Undelimited Delimited
%type<string> Key
%type<key_vals> KVLiterals
%type<key_val> KVLiteral
%type<node_vec> Cases LiteralList ArgList ArgListNone ArgListFull
%type<string_vec> IDList IDListFull IDListEmpty
%%

/****************************************************** Command Structure ******************************************************/
Program		: CodeBlock									{ program = $1;	}
		 	;
CodeBlock	: CodeBlock Command 						{ $$ = $1; std::get<jawe::command_block_node*>((**$$))->push_back(*$2);	delete $2; }
		 	| Command									{ $$ = jawe::make_node_ptr<jawe::command_block_node>(*$1); delete $1;	}
			;
Command		: Delimited delim_token						{ $$ = $1; }
		 	| Undelimited								{ $$ = $1; }
			;
Undelimited	: Cond										{ $$ = $1; }
			| While										{ $$ = $1; }
			| For										{ $$ = $1; }
			| SwitchCase								{ $$ = $1; }
			| NamedFun									{ $$ = $1; }
			| '{' CodeBlock '}'							{ $$ = $2; }
			;
Delimited	: Expr										{ $$ = $1; }
		 	| Declaration								{ $$ = $1; }
			| DoWhile									{ $$ = $1; 																}
			| return_token Expr							{ $$ = jawe::make_node_ptr<jawe::return_node>(*$2); delete $2; }
			| cont_token								{ $$ = jawe::make_node_ptr<jawe::continue_node>(); }
			| break_token								{ $$ = jawe::make_node_ptr<jawe::break_node>(); }
			|											{ $$ = jawe::make_node_ptr<jawe::empty_node>(); }
			;
NamedFun	: function_token id_token '(' IDList ')'
		 		'{' CodeBlock '}'						{
															auto fn = jawe::make_node_ptr<jawe::function_object_node>(*$4, *$7, *$2);
															$$ = jawe::make_node_ptr<jawe::function_declaration_node>(*$2, *fn);
															delete $2;
															delete $4;
															delete $7;
															delete fn;
														}
			;
Declaration	: const_token id_token						{ $$ = jawe::make_node_ptr<jawe::const_declaration_node>(jawe::make_node<jawe::variable_node>(*$2)); delete $2;	}
			| const_token Assign						{ $$ = jawe::make_node_ptr<jawe::const_declaration_node>(*$2); delete $2; }
			| var_token id_token						{ $$ = jawe::make_node_ptr<jawe::var_declaration_node>(jawe::make_node<jawe::variable_node>(*$2)); delete $2;	}
			| var_token Assign							{ $$ = jawe::make_node_ptr<jawe::var_declaration_node>(*$2); delete $2; }
			| let_token id_token						{ $$ = jawe::make_node_ptr<jawe::let_declaration_node>(jawe::make_node<jawe::variable_node>(*$2)); delete $2;	}
			| let_token Assign 							{ $$ = jawe::make_node_ptr<jawe::let_declaration_node>(*$2); err_block = &@2; delete $2; }
			;
Cond		: if_token '(' Expr ')' Command
	  			%prec no_else_token						{ $$ = jawe::make_node_ptr<jawe::if_else_node>(*$3, *$5);	delete $3; delete $5; }
	  		| if_token '(' Expr ')' Command
				else_token Command						{ $$ = jawe::make_node_ptr<jawe::if_else_node>(*$3, *$5, *$7); delete $3; delete $5; delete $7; }
			;
While		: while_token '(' Expr ')' Command			{ $$ = jawe::make_node_ptr<jawe::while_node>(*$3, *$5);	delete $3; delete $5; }
	   		;
For			: for_token '('
	          Delimited delim_token
			  Expr delim_token
			  Delimited ')'
			  Command									{ $$ = jawe::make_node_ptr<jawe::for_node>(*$3, *$5, *$7, *$9); delete $3; delete $5; delete $7; delete $9; }
	  		;
DoWhile		: do_token Command while_token '(' Expr ')'	{ $$ = jawe::make_node_ptr<jawe::do_while_node>(*$2, *$5); delete $2; delete $5; }
		 	;
SwitchCase	: switch_token '(' Expr ')' '{' Cases '}'	{ $$ = jawe::make_node_ptr<jawe::switch_node>(*$3, *$6); delete $3; delete $6; }
		   	;
Cases		: Cases Case								{ $$ = $1; $$->push_back(*$2); delete $2; }
			| Cases Default								{ $$ = $1; $$->push_back(*$2); delete $2; }
			| Case 										{ $$ = new std::vector<jawe::shared_node>{*$1}; delete $1; }
			| Default									{ $$ = new std::vector<jawe::shared_node>{*$1}; delete $1; }
			;
Case		: case_token Primitive ':' Command 			{ $$ = jawe::make_node_ptr<jawe::case_node>(*$2, *$4); delete $2; delete $4;}
	  		;
Default		: default_token ':' Command					{ $$ = jawe::make_node_ptr<jawe::default_node>(*$3); delete $3; }
		 	;
/*******************************************************************************************************************************/





/********************************************************* Expressions *********************************************************/
Expr		: Expr plus_token Expr						{ $$ = jawe::make_node_ptr<jawe::plus_node>(*$1, *$3); delete $1; delete $3; }
	 		| Expr minus_token Expr						{ $$ = jawe::make_node_ptr<jawe::minus_node>(*$1, *$3); delete $1; delete $3; }
	 		| Expr times_token Expr						{ $$ = jawe::make_node_ptr<jawe::times_node>(*$1, *$3); delete $1; delete $3; }
	 		| Expr divide_token Expr					{ $$ = jawe::make_node_ptr<jawe::divide_node>(*$1, *$3); delete $1; delete $3; }
	 		| Expr mod_token Expr						{ $$ = jawe::make_node_ptr<jawe::mod_node>(*$1, *$3); delete $1; delete $3; }
			| Expr power_token Expr						{ $$ = jawe::make_node_ptr<jawe::power_node>(*$1, *$3); delete $1; delete $3; }
			| plus_token Expr %prec uplus_token			{ $$ = jawe::make_node_ptr<jawe::uplus_node>(*$2); delete $2; }
			| minus_token Expr %prec uminus_token		{ $$ = jawe::make_node_ptr<jawe::uminus_node>(*$2); delete $2; }

			| inc_token Expr							{ $$ = jawe::make_node_ptr<jawe::increment_node>(*$2); delete $2; }
			| dec_token Expr							{ $$ = jawe::make_node_ptr<jawe::decrement_node>(*$2); 	delete $2; }
			| Expr inc_token %prec post_inc				{ $$ = jawe::make_node_ptr<jawe::post_increment_node>(*$1); delete $1; }
			| Expr dec_token %prec post_dec				{ $$ = jawe::make_node_ptr<jawe::post_decrement_node>(*$1); delete $1; }
			| delete_token Expr							{ $$ = jawe::make_node_ptr<jawe::delete_node>(*$2); delete $2; }
			| typeof_token Expr							{ $$ = jawe::make_node_ptr<jawe::typeof_node>(*$2); delete $2; }
			| void_token Expr							{ $$ = jawe::make_node_ptr<jawe::void_node>(*$2); delete $2; }

			| Expr eq_token Expr						{ $$ = jawe::make_node_ptr<jawe::equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr not_eq_token Expr					{ $$ = jawe::make_node_ptr<jawe::not_equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr t_eq_token Expr						{ $$ = jawe::make_node_ptr<jawe::typed_equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr t_not_eq_token Expr					{ $$ = jawe::make_node_ptr<jawe::typed_not_equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr less_token Expr						{ $$ = jawe::make_node_ptr<jawe::less_then_node>(*$1, *$3); delete $1; delete $3; }
			| Expr less_eq_token Expr					{ $$ = jawe::make_node_ptr<jawe::less_or_equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr great_token Expr						{ $$ = jawe::make_node_ptr<jawe::greater_then_node>(*$1, *$3); delete $1; delete $3;	}
			| Expr great_eq_token Expr					{ $$ = jawe::make_node_ptr<jawe::greater_or_equals_node>(*$1, *$3); delete $1; delete $3; }
			| Expr in_token Expr						{ $$ = jawe::make_node_ptr<jawe::in_node>(*$1, *$3); delete $1; delete $3; }
			| Expr instanceof_token Expr				{ $$ = jawe::make_node_ptr<jawe::instance_of_node>(*$1, *$3); delete $1; delete $3; }

			| log_not_token Expr						{ $$ = jawe::make_node_ptr<jawe::logic_not_node>(*$2); delete $2; }
			| Expr log_and_token Expr					{ $$ = jawe::make_node_ptr<jawe::logic_and_node>(*$1, *$3); delete $1; delete $3; }
			| Expr log_or_token Expr					{ $$ = jawe::make_node_ptr<jawe::logic_or_node>(*$1, *$3); delete $1; delete $3; }

			| bit_not_token Expr						{ $$ = jawe::make_node_ptr<jawe::bit_not_node>(*$2); delete $2; }
			| Expr bit_and_token Expr					{ $$ = jawe::make_node_ptr<jawe::bit_and_node>(*$1, *$3); delete $1; delete $3; }
			| Expr bit_or_token Expr					{ $$ = jawe::make_node_ptr<jawe::bit_or_node>(*$1, *$3); delete $1; delete $3; }
			| Expr bit_xor_token Expr					{ $$ = jawe::make_node_ptr<jawe::bit_xor_node>(*$1, *$3); delete $1; delete $3; }
			| Expr bit_shift_l_token Expr				{ $$ = jawe::make_node_ptr<jawe::bit_shift_l_node>(*$1, *$3); delete $1; delete $3; }
			| Expr bit_shift_r_token Expr				{ $$ = jawe::make_node_ptr<jawe::bit_shift_r_node>(*$1, *$3); delete $1; delete $3; }
			| Expr bit_shift_u_token Expr				{ $$ = jawe::make_node_ptr<jawe::bit_shift_u_node>(*$1, *$3); delete $1; delete $3; }

			| Expr '?' Expr ':' Expr					{	$$ = jawe::make_node_ptr<jawe::ternary_conditional_node>(*$1, *$3, *$5); delete $1; delete $3; delete $5; }

   			| '(' Expr ')' %prec prec_parens_token		{ $$ = $2; }

			| new_token Expr							{ $$ = jawe::make_node_ptr<jawe::new_node>(*$2); delete $2; }

			| Expr '(' ArgList ')' %prec fn_call_token	{	$$ = jawe::make_node_ptr<jawe::function_call_node>(*$1, *$3); delete $1; delete $3;	}
			| LValue %prec phony_lval					{ $$ = $1; }
  			| Literal									{ $$ = $1; }

			| Assign									{ $$ = $1; }
  			;
LValue		: Expr bracket_token Expr bracket_closed	{ $$ = jawe::make_node_ptr<jawe::array_access_node>(*$1, *$3); delete $1; delete $3; }
			| Expr dot_access_token Expr				{ $$ = jawe::make_node_ptr<jawe::dot_access_node>(*$1, *$3); delete $1; delete $3; }
			| id_token									{ $$ = jawe::make_node_ptr<jawe::variable_node>(*$1); delete $1; }
			;
ArgList		: ArgListNone								{ $$ = $1; }
		 	| ArgListFull								{ $$ = $1; }
			;
ArgListFull	: ArgListFull comma_token Expr				{ $$ = $1; $$->push_back(*$3); delete $3;}
		 	| Expr										{ $$ = new std::vector<jawe::shared_node>{*$1}; delete $1; }
			;
ArgListNone	: 											{ $$ = new std::vector<jawe::shared_node>; }
			;
Assign		: LValue assign_token Expr					{ $$ = jawe::make_node_ptr<jawe::assign_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_plus_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_plus_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_minus_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_minus_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_pow_token Expr					{ $$ = jawe::make_node_ptr<jawe::assign_pow_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_mult_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_mul_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_div_token Expr					{ $$ = jawe::make_node_ptr<jawe::assign_div_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_mod_token Expr					{ $$ = jawe::make_node_ptr<jawe::assign_mod_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_sh_l_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_shift_l_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_sh_r_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_shift_r_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_sh_u_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_shift_u_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_con_b_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_bit_con_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_xor_b_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_bit_xor_node>(*$1, *$3); delete $1; delete $3; }
			| LValue ass_dis_b_token Expr				{ $$ = jawe::make_node_ptr<jawe::assign_bit_dis_node>(*$1, *$3); delete $1; delete $3; }
			;
/*******************************************************************************************************************************/





/********************************************************* Literals ************************************************************/
Literal		: Primitive									{ $$ = $1; }
			| IndexedObj								{ $$ = $1; }
			| Lambda									{ $$ = $1; }
			;
Primitive	: undefined_token							{ $$ = jawe::make_node_ptr<jawe::undefined_node>(); }
		 	| null_token								{ $$ = jawe::make_node_ptr<jawe::null_node>(); }
			| nan_token									{ $$ = jawe::make_node_ptr<jawe::nan_node>();	}
			| true_token								{ $$ = jawe::make_node_ptr<jawe::true_node>(); }
			| false_token								{ $$ = jawe::make_node_ptr<jawe::false_node>(); }
			| num_token									{ $$ = jawe::make_node_ptr<jawe::numeric_node>($1);	}
			| string_token								{ $$ = jawe::make_node_ptr<jawe::string_node>(*$1); delete $1; }
			;
IndexedObj	: ArrLiteral								{ $$ = $1; }
			| ObjLiteral								{ $$ = $1; }
			;
ArrLiteral	: bracket_token LiteralList bracket_closed	{ $$ = jawe::make_node_ptr<jawe::array_node>(*$2); delete $2; }
		  	;
LiteralList	: LiteralList comma_token Expr				{ $$ = $1; $$->push_back(*$3); delete $3; }
		 	| Expr										{ $$ = new std::vector<jawe::shared_node>{*$1}; delete $1; }
			|											{ $$ = new std::vector<jawe::shared_node>(); }
			;
ObjLiteral	: '{' KVLiterals '}'						{	$$ = jawe::make_node_ptr<jawe::object_node>(*$2); delete $2; }
		  	;
KVLiterals	: KVLiterals comma_token KVLiteral			{
	$$ = $1;
	(*$$)[$3->first] = $3->second;
	delete $3;
}
		   	| KVLiteral									{
					$$ = new std::map<std::string, jawe::shared_node>;
					(*$$)[$1->first] = $1->second;
					delete $1;
				 }
			|											{ $$ = new std::map<std::string, jawe::shared_node>; }
			;
KVLiteral	: Key ':' Expr								{ $$ = new std::pair<std::string, jawe::shared_node>(*$1, *$3); delete $1; delete $3; }
		  	;
Key			: string_token								{ $$ = $1; }
	  		| id_token									{ $$ = $1; }
			;
Lambda		: function_token '(' IDList ')'
				'{' LambdaBody '}'						{ $$ = jawe::make_node_ptr<jawe::function_object_node>(*$3, *$6, "lambda"); delete $3; delete $6; }
LambdaBody	: CodeBlock									{ $$ = $1; }
		   	|											{ $$ = jawe::make_node_ptr<jawe::command_block_node>(); }
			;
IDList		: IDListFull								{ $$ = $1; }
			| IDListEmpty								{ $$ = $1; }
			;
IDListFull	: IDListFull comma_token id_token			{ $$ = $1; $$->push_back(*$3); delete $3; }
			| id_token									{ $$ = new std::vector<std::string>{*$1}; delete $1; }
			;
IDListEmpty	:											{ $$ = new std::vector<std::string>; }
			;
/*******************************************************************************************************************************/

%%

void yyerror(const std::string& msg) {
	std::string filename = jawe::control::get().input_filename();
	int line = jawe::reader::get_reader().get_line();
	int position = jawe::reader::get_reader().get_position();
	std::string buff = jawe::reader::get_reader().get_buffer();
	YYLTYPE* block = (YYLTYPE*)err_block;

	if( block ) {
		line = block->first_line + 1;
		position = block->first_column;
	}

	std::cerr	<< "[ERROR] "
				<< filename
				<< ":" << (line)
				<< ":" << (position)
				<< ": " << msg
				<< std::endl;

	buff = jawe::reader::get_reader().get_line(line-1);
	int old_len = buff.size();
	boost::trim(buff);
	int new_len = buff.size();
	std::cerr	<< std::string(4, ' ');
	std::cerr	<< buff << std::endl
				<< std::string(4 + position-3 - (old_len - new_len), ' ')
				<< "--^--" << std::endl;

	std::exit(EXIT_FAILURE);
}
